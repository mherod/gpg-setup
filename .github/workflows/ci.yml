name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Run ShellCheck
      run: |
        echo "Running ShellCheck on all shell scripts..."
        shellcheck_failed=0
        
        for script in $(find . -name "*.sh" -type f); do
          echo "Checking $script"
          if ! shellcheck -S style -f gcc "$script"; then
            shellcheck_failed=1
          fi
        done
        
        if [ $shellcheck_failed -eq 1 ]; then
          echo "ShellCheck found issues!"
          exit 1
        else
          echo "All shell scripts passed ShellCheck!"
        fi
        
    - name: Validate script syntax
      run: |
        echo "Validating shell script syntax..."
        syntax_failed=0
        
        for script in $(find . -name "*.sh" -type f); do
          echo "Checking syntax of $script"
          if ! bash -n "$script"; then
            echo "Syntax error in $script"
            syntax_failed=1
          fi
        done
        
        if [ $syntax_failed -eq 1 ]; then
          echo "Syntax validation failed!"
          exit 1
        else
          echo "All scripts have valid syntax!"
        fi
        
    - name: Check script permissions
      run: |
        echo "Checking script permissions..."
        for script in $(find . -name "*.sh" -type f); do
          echo "Checking permissions of $script"
          ls -la "$script"
          if [ ! -x "$script" ]; then
            echo "Warning: $script is not executable"
          fi
        done
        
    - name: Test help functionality (should work on any OS)
      run: |
        echo "Testing help functionality on Linux (should work)..."
        if [ -f "setup-gpg-git.sh" ]; then
          echo "Testing --help flag"
          ./setup-gpg-git.sh --help
          echo "✅ Help works on non-macOS systems"
        fi
        
    - name: Test environment validation (should fail on Linux)
      run: |
        echo "Testing environment validation on Linux (should fail gracefully)..."
        if [ -f "setup-gpg-git.sh" ]; then
          echo "Testing that script rejects non-macOS systems"
          
          # This should fail with exit code 1 due to environment validation
          if ./setup-gpg-git.sh --dry-run 2>&1; then
            echo "❌ ERROR: Script should have failed on Linux!"
            exit 1
          else
            echo "✅ Script correctly rejected non-macOS environment"
          fi
          
          # Test that error message is helpful
          echo "Checking error message quality..."
          error_output=$(./setup-gpg-git.sh --auto 2>&1 || true)
          
          if echo "$error_output" | grep -q "Unsupported operating system"; then
            echo "✅ Found expected error message about unsupported OS"
          else
            echo "❌ Error message doesn't mention unsupported OS"
            echo "Actual output: $error_output"
            exit 1
          fi
          
          if echo "$error_output" | grep -q "macOS (Darwin)"; then
            echo "✅ Error message mentions macOS requirement"
          else
            echo "❌ Error message doesn't mention macOS requirement"
            exit 1
          fi
          
          if echo "$error_output" | grep -q "Linux.*package manager"; then
            echo "✅ Error message provides Linux alternative"
          else
            echo "❌ Error message doesn't provide Linux alternative"
            exit 1
          fi
        fi

  environment-validation:
    name: Environment Validation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make script executable
      run: chmod +x setup-gpg-git.sh
      
    - name: Test OS detection
      run: |
        echo "Testing OS detection on Linux..."
        
        # Test that uname -s returns Linux
        actual_os=$(uname -s)
        echo "Detected OS: $actual_os"
        
        if [ "$actual_os" != "Linux" ]; then
          echo "❌ Expected Linux, got $actual_os"
          exit 1
        fi
        
        echo "✅ Running on Linux as expected"
        
    - name: Test environment validation function behavior
      run: |
        echo "Testing environment validation function directly..."
        
        # Extract and test the validate_environment function
        grep -A 50 "validate_environment()" setup-gpg-git.sh > validate_test.sh
        echo "}" >> validate_test.sh
        
        # Add required functions and variables
        cat > test_env.sh << 'EOF'
        #!/bin/bash
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
        log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
        log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
        log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
        command_exists() { command -v "$1" >/dev/null 2>&1; }
        EOF
        
        cat validate_test.sh >> test_env.sh
        echo "validate_environment" >> test_env.sh
        
        chmod +x test_env.sh
        
        echo "Running validation function (should fail on Linux):"
        if ./test_env.sh; then
          echo "❌ Environment validation should have failed on Linux!"
          exit 1
        else
          echo "✅ Environment validation correctly failed on Linux"
        fi
        
    - name: Test argument parsing independence
      run: |
        echo "Testing that argument parsing works before environment validation..."
        
        # Test various flag combinations that should parse successfully
        flags_to_test=(
          "--help"
          "-h" 
          "--dry-run --help"
          "--auto --help"
          "--new --help"
        )
        
        for flags in "${flags_to_test[@]}"; do
          echo "Testing: ./setup-gpg-git.sh $flags"
          if timeout 10s ./setup-gpg-git.sh $flags >/dev/null 2>&1; then
            echo "✅ $flags works correctly"
          else
            echo "❌ $flags failed unexpectedly"
            exit 1
          fi
        done
        
    - name: Test error message completeness
      run: |
        echo "Testing that error messages contain all required information..."
        
        # Capture full error output
        error_output=$(./setup-gpg-git.sh --auto 2>&1 || true)
        echo "Full error output:"
        echo "$error_output"
        echo "===================="
        
        # Check for all required elements
        checks=(
          "Unsupported operating system.*Linux"
          "macOS.*Darwin"
          "Linux.*package manager"
          "Windows.*GPG4Win"
          "Environment validation failed"
        )
        
        for check in "${checks[@]}"; do
          if echo "$error_output" | grep -E "$check" >/dev/null; then
            echo "✅ Found: $check"
          else
            echo "❌ Missing: $check"
            echo "Full output was:"
            echo "$error_output"
            exit 1
          fi
        done
        
        echo "✅ All required error message elements present"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "Running basic security checks..."
        
        # Check for hardcoded secrets or sensitive patterns
        echo "Checking for potential secrets..."
        if grep -r -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" . --include="*.sh" || true; then
          echo "Found potential hardcoded secrets - please review"
        fi
        
        # Check for dangerous commands
        echo "Checking for dangerous commands..."
        dangerous_commands=("rm -rf" "sudo rm" "chmod 777" "eval" "exec")
        for cmd in "${dangerous_commands[@]}"; do
          if grep -r "$cmd" . --include="*.sh"; then
            echo "Warning: Found potentially dangerous command: $cmd"
          fi
        done
        
        # Check for proper error handling
        echo "Checking for error handling patterns..."
        if ! grep -r "set -e" . --include="*.sh"; then
          echo "Note: Consider using 'set -e' for better error handling"
        fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation
      run: |
        echo "Checking documentation..."
        
        # Check if scripts have help text
        for script in $(find . -name "*.sh" -type f); do
          if grep -q "help\|usage\|--help" "$script"; then
            echo "✓ $script has help documentation"
          else
            echo "⚠ $script might benefit from help documentation"
          fi
        done
        
        # Check for README
        if [ -f "README.md" ]; then
          echo "✓ README.md exists"
        else
          echo "⚠ Consider adding a README.md file"
        fi